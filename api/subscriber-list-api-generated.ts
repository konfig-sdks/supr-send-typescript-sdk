/* tslint:disable */
/* eslint-disable */
/*
SuprSend API

SuprSend is a central communication stack for easily creating, managing and delivering notifications to your end users on multiple channels. Our single notification API has all the features set, which enables you to send notifications in a reliable and scalable manner and take care of end user experience, thereby eliminating the need to develop any notification service in-house for transactional/engagement notifications.

The version of the OpenAPI document: 1.2.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { SubscriberListCreateListRequest } from '../models';
// @ts-ignore
import { SubscriberListRemoveSubscribersFromListRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SubscriberListApi - axios parameter creator
 * @export
 */
export const SubscriberListApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * API to create / manage lists to send notification to a bulk list of users
         * @summary Create a List
         * @param {SubscriberListCreateListRequest} [subscriberListCreateListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createList: async (subscriberListCreateListRequest?: SubscriberListCreateListRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/subscriber_list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: subscriberListCreateListRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/subscriber_list',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(subscriberListCreateListRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API to delete a list created in your workspace
         * @summary Delete List
         * @param {string} listId Unique string idenitifier of the list which you want to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteList: async (listId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listId' is not null or undefined
            assertParamExists('deleteList', 'listId', listId)
            const localVarPath = `/v1/subscriber_list/{list_id}/delete`
                .replace(`{${"list_id"}}`, encodeURIComponent(String(listId !== undefined ? listId : `-list_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/subscriber_list/{list_id}/delete',
                httpMethod: 'PATCH'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API to get the data of all the lists created in your workspace
         * @summary Get all Lists
         * @param {string} [limit] number of results to be returned in API response
         * @param {string} [offset] starting position of brand list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllLists: async (limit?: string, offset?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/subscriber_list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/subscriber_list',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API to get information corresponding to a list id
         * @summary Get List data
         * @param {string} listId Unique string idenitifier of the list.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListData: async (listId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listId' is not null or undefined
            assertParamExists('getListData', 'listId', listId)
            const localVarPath = `/v1/subscriber_list/{list_id}`
                .replace(`{${"list_id"}}`, encodeURIComponent(String(listId !== undefined ? listId : `-list_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/subscriber_list/{list_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API to remove users / subscribers from the list
         * @summary Remove Subscribers from List
         * @param {string} listId Unique string idenitifier of the list to which user needs to be updated
         * @param {SubscriberListRemoveSubscribersFromListRequest} [subscriberListRemoveSubscribersFromListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSubscribersFromList: async (listId: string, subscriberListRemoveSubscribersFromListRequest?: SubscriberListRemoveSubscribersFromListRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listId' is not null or undefined
            assertParamExists('removeSubscribersFromList', 'listId', listId)
            const localVarPath = `/v1/subscriber_list/{list_id}/subscriber/remove`
                .replace(`{${"list_id"}}`, encodeURIComponent(String(listId !== undefined ? listId : `-list_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: subscriberListRemoveSubscribersFromListRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/subscriber_list/{list_id}/subscriber/remove',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(subscriberListRemoveSubscribersFromListRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubscriberListApi - functional programming interface
 * @export
 */
export const SubscriberListApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubscriberListApiAxiosParamCreator(configuration)
    return {
        /**
         * API to create / manage lists to send notification to a bulk list of users
         * @summary Create a List
         * @param {SubscriberListApiCreateListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createList(requestParameters: SubscriberListApiCreateListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const subscriberListCreateListRequest: SubscriberListCreateListRequest = {
                list_id: requestParameters.list_id,
                list_name: requestParameters.list_name,
                list_description: requestParameters.list_description
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createList(subscriberListCreateListRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API to delete a list created in your workspace
         * @summary Delete List
         * @param {SubscriberListApiDeleteListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteList(requestParameters: SubscriberListApiDeleteListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteList(requestParameters.listId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API to get the data of all the lists created in your workspace
         * @summary Get all Lists
         * @param {SubscriberListApiGetAllListsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllLists(requestParameters: SubscriberListApiGetAllListsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllLists(requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API to get information corresponding to a list id
         * @summary Get List data
         * @param {SubscriberListApiGetListDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListData(requestParameters: SubscriberListApiGetListDataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListData(requestParameters.listId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API to remove users / subscribers from the list
         * @summary Remove Subscribers from List
         * @param {SubscriberListApiRemoveSubscribersFromListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeSubscribersFromList(requestParameters: SubscriberListApiRemoveSubscribersFromListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const subscriberListRemoveSubscribersFromListRequest: SubscriberListRemoveSubscribersFromListRequest = {
                distinct_ids: requestParameters.distinct_ids
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeSubscribersFromList(requestParameters.listId, subscriberListRemoveSubscribersFromListRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SubscriberListApi - factory interface
 * @export
 */
export const SubscriberListApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubscriberListApiFp(configuration)
    return {
        /**
         * API to create / manage lists to send notification to a bulk list of users
         * @summary Create a List
         * @param {SubscriberListApiCreateListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createList(requestParameters: SubscriberListApiCreateListRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.createList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * API to delete a list created in your workspace
         * @summary Delete List
         * @param {SubscriberListApiDeleteListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteList(requestParameters: SubscriberListApiDeleteListRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.deleteList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * API to get the data of all the lists created in your workspace
         * @summary Get all Lists
         * @param {SubscriberListApiGetAllListsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllLists(requestParameters: SubscriberListApiGetAllListsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getAllLists(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * API to get information corresponding to a list id
         * @summary Get List data
         * @param {SubscriberListApiGetListDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListData(requestParameters: SubscriberListApiGetListDataRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getListData(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * API to remove users / subscribers from the list
         * @summary Remove Subscribers from List
         * @param {SubscriberListApiRemoveSubscribersFromListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeSubscribersFromList(requestParameters: SubscriberListApiRemoveSubscribersFromListRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.removeSubscribersFromList(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createList operation in SubscriberListApi.
 * @export
 * @interface SubscriberListApiCreateListRequest
 */
export type SubscriberListApiCreateListRequest = {
    
} & SubscriberListCreateListRequest

/**
 * Request parameters for deleteList operation in SubscriberListApi.
 * @export
 * @interface SubscriberListApiDeleteListRequest
 */
export type SubscriberListApiDeleteListRequest = {
    
    /**
    * Unique string idenitifier of the list which you want to delete
    * @type {string}
    * @memberof SubscriberListApiDeleteList
    */
    readonly listId: string
    
}

/**
 * Request parameters for getAllLists operation in SubscriberListApi.
 * @export
 * @interface SubscriberListApiGetAllListsRequest
 */
export type SubscriberListApiGetAllListsRequest = {
    
    /**
    * number of results to be returned in API response
    * @type {string}
    * @memberof SubscriberListApiGetAllLists
    */
    readonly limit?: string
    
    /**
    * starting position of brand list
    * @type {string}
    * @memberof SubscriberListApiGetAllLists
    */
    readonly offset?: string
    
}

/**
 * Request parameters for getListData operation in SubscriberListApi.
 * @export
 * @interface SubscriberListApiGetListDataRequest
 */
export type SubscriberListApiGetListDataRequest = {
    
    /**
    * Unique string idenitifier of the list.
    * @type {string}
    * @memberof SubscriberListApiGetListData
    */
    readonly listId: string
    
}

/**
 * Request parameters for removeSubscribersFromList operation in SubscriberListApi.
 * @export
 * @interface SubscriberListApiRemoveSubscribersFromListRequest
 */
export type SubscriberListApiRemoveSubscribersFromListRequest = {
    
    /**
    * Unique string idenitifier of the list to which user needs to be updated
    * @type {string}
    * @memberof SubscriberListApiRemoveSubscribersFromList
    */
    readonly listId: string
    
} & SubscriberListRemoveSubscribersFromListRequest

/**
 * SubscriberListApiGenerated - object-oriented interface
 * @export
 * @class SubscriberListApiGenerated
 * @extends {BaseAPI}
 */
export class SubscriberListApiGenerated extends BaseAPI {
    /**
     * API to create / manage lists to send notification to a bulk list of users
     * @summary Create a List
     * @param {SubscriberListApiCreateListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberListApiGenerated
     */
    public createList(requestParameters: SubscriberListApiCreateListRequest, options?: AxiosRequestConfig) {
        return SubscriberListApiFp(this.configuration).createList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API to delete a list created in your workspace
     * @summary Delete List
     * @param {SubscriberListApiDeleteListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberListApiGenerated
     */
    public deleteList(requestParameters: SubscriberListApiDeleteListRequest, options?: AxiosRequestConfig) {
        return SubscriberListApiFp(this.configuration).deleteList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API to get the data of all the lists created in your workspace
     * @summary Get all Lists
     * @param {SubscriberListApiGetAllListsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberListApiGenerated
     */
    public getAllLists(requestParameters: SubscriberListApiGetAllListsRequest = {}, options?: AxiosRequestConfig) {
        return SubscriberListApiFp(this.configuration).getAllLists(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API to get information corresponding to a list id
     * @summary Get List data
     * @param {SubscriberListApiGetListDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberListApiGenerated
     */
    public getListData(requestParameters: SubscriberListApiGetListDataRequest, options?: AxiosRequestConfig) {
        return SubscriberListApiFp(this.configuration).getListData(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API to remove users / subscribers from the list
     * @summary Remove Subscribers from List
     * @param {SubscriberListApiRemoveSubscribersFromListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberListApiGenerated
     */
    public removeSubscribersFromList(requestParameters: SubscriberListApiRemoveSubscribersFromListRequest, options?: AxiosRequestConfig) {
        return SubscriberListApiFp(this.configuration).removeSubscribersFromList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
