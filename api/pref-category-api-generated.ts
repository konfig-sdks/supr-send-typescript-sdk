/* tslint:disable */
/* eslint-disable */
/*
SuprSend API

SuprSend is a central communication stack for easily creating, managing and delivering notifications to your end users on multiple channels. Our single notification API has all the features set, which enables you to send notifications in a reliable and scalable manner and take care of end user experience, thereby eliminating the need to develop any notification service in-house for transactional/engagement notifications.

The version of the OpenAPI document: 1.2.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PrefCategoryApi - axios parameter creator
 * @export
 */
export const PrefCategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * API to get user category preferences
         * @summary Get User Preferences (All Categories)
         * @param {string} distinctId distinct_id of the user whose preferences should be fetched
         * @param {string} [tenantId] to fetch user preferences for a particular brand
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPreferencesAllCategories: async (distinctId: string, tenantId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'distinctId' is not null or undefined
            assertParamExists('getUserPreferencesAllCategories', 'distinctId', distinctId)
            const localVarPath = `/v1/subscriber/{distinct_id}/category`
                .replace(`{${"distinct_id"}}`, encodeURIComponent(String(distinctId !== undefined ? distinctId : `-distinct_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })
            if (tenantId !== undefined) {
                localVarQueryParameter['tenant_id'] = tenantId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/subscriber/{distinct_id}/category',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PrefCategoryApi - functional programming interface
 * @export
 */
export const PrefCategoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PrefCategoryApiAxiosParamCreator(configuration)
    return {
        /**
         * API to get user category preferences
         * @summary Get User Preferences (All Categories)
         * @param {PrefCategoryApiGetUserPreferencesAllCategoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserPreferencesAllCategories(requestParameters: PrefCategoryApiGetUserPreferencesAllCategoriesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserPreferencesAllCategories(requestParameters.distinctId, requestParameters.tenantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PrefCategoryApi - factory interface
 * @export
 */
export const PrefCategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PrefCategoryApiFp(configuration)
    return {
        /**
         * API to get user category preferences
         * @summary Get User Preferences (All Categories)
         * @param {PrefCategoryApiGetUserPreferencesAllCategoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserPreferencesAllCategories(requestParameters: PrefCategoryApiGetUserPreferencesAllCategoriesRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getUserPreferencesAllCategories(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getUserPreferencesAllCategories operation in PrefCategoryApi.
 * @export
 * @interface PrefCategoryApiGetUserPreferencesAllCategoriesRequest
 */
export type PrefCategoryApiGetUserPreferencesAllCategoriesRequest = {
    
    /**
    * distinct_id of the user whose preferences should be fetched
    * @type {string}
    * @memberof PrefCategoryApiGetUserPreferencesAllCategories
    */
    readonly distinctId: string
    
    /**
    * to fetch user preferences for a particular brand
    * @type {string}
    * @memberof PrefCategoryApiGetUserPreferencesAllCategories
    */
    readonly tenantId?: string
    
}

/**
 * PrefCategoryApiGenerated - object-oriented interface
 * @export
 * @class PrefCategoryApiGenerated
 * @extends {BaseAPI}
 */
export class PrefCategoryApiGenerated extends BaseAPI {
    /**
     * API to get user category preferences
     * @summary Get User Preferences (All Categories)
     * @param {PrefCategoryApiGetUserPreferencesAllCategoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrefCategoryApiGenerated
     */
    public getUserPreferencesAllCategories(requestParameters: PrefCategoryApiGetUserPreferencesAllCategoriesRequest, options?: AxiosRequestConfig) {
        return PrefCategoryApiFp(this.configuration).getUserPreferencesAllCategories(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
