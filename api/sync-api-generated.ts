/* tslint:disable */
/* eslint-disable */
/*
SuprSend API

SuprSend is a central communication stack for easily creating, managing and delivering notifications to your end users on multiple channels. Our single notification API has all the features set, which enables you to send notifications in a reliable and scalable manner and take care of end user experience, thereby eliminating the need to develop any notification service in-house for transactional/engagement notifications.

The version of the OpenAPI document: 1.2.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SyncApi - axios parameter creator
 * @export
 */
export const SyncApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Starts sync on the active(live) version of the list, identified by list_id, and creates an empty draft version.
         * @summary Start Sync
         * @param {string} listId Unique identifier of the list on which the sync needs to start to create a draft version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStartSync: async (listId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listId' is not null or undefined
            assertParamExists('listStartSync', 'listId', listId)
            const localVarPath = `/v1/subscriber_list/{list_id}/start_sync`
                .replace(`{${"list_id"}}`, encodeURIComponent(String(listId !== undefined ? listId : `-list_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/subscriber_list/{list_id}/start_sync',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SyncApi - functional programming interface
 * @export
 */
export const SyncApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SyncApiAxiosParamCreator(configuration)
    return {
        /**
         * Starts sync on the active(live) version of the list, identified by list_id, and creates an empty draft version.
         * @summary Start Sync
         * @param {SyncApiListStartSyncRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listStartSync(requestParameters: SyncApiListStartSyncRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listStartSync(requestParameters.listId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SyncApi - factory interface
 * @export
 */
export const SyncApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SyncApiFp(configuration)
    return {
        /**
         * Starts sync on the active(live) version of the list, identified by list_id, and creates an empty draft version.
         * @summary Start Sync
         * @param {SyncApiListStartSyncRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listStartSync(requestParameters: SyncApiListStartSyncRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.listStartSync(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for listStartSync operation in SyncApi.
 * @export
 * @interface SyncApiListStartSyncRequest
 */
export type SyncApiListStartSyncRequest = {
    
    /**
    * Unique identifier of the list on which the sync needs to start to create a draft version
    * @type {string}
    * @memberof SyncApiListStartSync
    */
    readonly listId: string
    
}

/**
 * SyncApiGenerated - object-oriented interface
 * @export
 * @class SyncApiGenerated
 * @extends {BaseAPI}
 */
export class SyncApiGenerated extends BaseAPI {
    /**
     * Starts sync on the active(live) version of the list, identified by list_id, and creates an empty draft version.
     * @summary Start Sync
     * @param {SyncApiListStartSyncRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SyncApiGenerated
     */
    public listStartSync(requestParameters: SyncApiListStartSyncRequest, options?: AxiosRequestConfig) {
        return SyncApiFp(this.configuration).listStartSync(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
