/* tslint:disable */
/* eslint-disable */
/*
SuprSend API

SuprSend is a central communication stack for easily creating, managing and delivering notifications to your end users on multiple channels. Our single notification API has all the features set, which enables you to send notifications in a reliable and scalable manner and take care of end user experience, thereby eliminating the need to develop any notification service in-house for transactional/engagement notifications.

The version of the OpenAPI document: 1.2.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { SubscriberAddToDraftListRequest } from '../models';
// @ts-ignore
import { SubscriberAddToListRequest } from '../models';
// @ts-ignore
import { SubscriberRemoveFromDraftListRequest } from '../models';
// @ts-ignore
import { SubscriberUpdateUserPreferencesCategoryRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SubscriberApi - axios parameter creator
 * @export
 */
export const SubscriberApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add subscribers to a draft list with a version_id that uniquely identifies the draft list
         * @summary Add Subscribers to Draft List
         * @param {string} listId Unique string idenitifier of the list to which user needs to be updated
         * @param {string} versionId Unique string idenitifier of the draft version of the list to which user needs to be updated
         * @param {SubscriberAddToDraftListRequest} [subscriberAddToDraftListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToDraftList: async (listId: string, versionId: string, subscriberAddToDraftListRequest?: SubscriberAddToDraftListRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listId' is not null or undefined
            assertParamExists('addToDraftList', 'listId', listId)
            // verify required parameter 'versionId' is not null or undefined
            assertParamExists('addToDraftList', 'versionId', versionId)
            const localVarPath = `/v1/subscriber_list/{list_id}/version/{version_id}/subscriber/add`
                .replace(`{${"list_id"}}`, encodeURIComponent(String(listId !== undefined ? listId : `-list_id-`)))
                .replace(`{${"version_id"}}`, encodeURIComponent(String(versionId !== undefined ? versionId : `-version_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: subscriberAddToDraftListRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/subscriber_list/{list_id}/version/{version_id}/subscriber/add',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(subscriberAddToDraftListRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API to add users / subscribers to the list
         * @summary Add Subscribers to List
         * @param {string} listId Unique string idenitifier of the list to which user needs to be updated
         * @param {SubscriberAddToListRequest} [subscriberAddToListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToList: async (listId: string, subscriberAddToListRequest?: SubscriberAddToListRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listId' is not null or undefined
            assertParamExists('addToList', 'listId', listId)
            const localVarPath = `/v1/subscriber_list/{list_id}/subscriber/add`
                .replace(`{${"list_id"}}`, encodeURIComponent(String(listId !== undefined ? listId : `-list_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: subscriberAddToListRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/subscriber_list/{list_id}/subscriber/add',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(subscriberAddToListRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API to delete a list created in your workspace
         * @summary Delete Draft List
         * @param {string} listId Unique string idenitifier of the list which you want to delete
         * @param {string} versionId Unique identifier of the draft version of the list which needs to be deleted
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDraftList: async (listId: string, versionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listId' is not null or undefined
            assertParamExists('deleteDraftList', 'listId', listId)
            // verify required parameter 'versionId' is not null or undefined
            assertParamExists('deleteDraftList', 'versionId', versionId)
            const localVarPath = `/v1/subscriber_list/{list_id}/version/{version_id}/delete`
                .replace(`{${"list_id"}}`, encodeURIComponent(String(listId !== undefined ? listId : `-list_id-`)))
                .replace(`{${"version_id"}}`, encodeURIComponent(String(versionId !== undefined ? versionId : `-version_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/subscriber_list/{list_id}/version/{version_id}/delete',
                httpMethod: 'PATCH'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Finishes the sync for a draft version and makes that particular version live for the given list_id
         * @summary Finish Sync
         * @param {string} listId Unique string idenitifier of the list
         * @param {string} versionId Unique string idenitifier of the draft version of the list which needs to be made active(live)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        finishSyncDraftVersion: async (listId: string, versionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listId' is not null or undefined
            assertParamExists('finishSyncDraftVersion', 'listId', listId)
            // verify required parameter 'versionId' is not null or undefined
            assertParamExists('finishSyncDraftVersion', 'versionId', versionId)
            const localVarPath = `/v1/subscriber_list/{list_id}/version/{version_id}/finish_sync`
                .replace(`{${"list_id"}}`, encodeURIComponent(String(listId !== undefined ? listId : `-list_id-`)))
                .replace(`{${"version_id"}}`, encodeURIComponent(String(versionId !== undefined ? versionId : `-version_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/subscriber_list/{list_id}/version/{version_id}/finish_sync',
                httpMethod: 'PATCH'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove subscribers from a draft list with a version_id that uniquely identifies the draft list
         * @summary Remove Subscribers from Draft List
         * @param {string} listId Unique string idenitifier of the list to which user needs to be updated
         * @param {string} versionId Unique string idenitifier of the draft version of the list to which user needs to be updated
         * @param {SubscriberRemoveFromDraftListRequest} [subscriberRemoveFromDraftListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromDraftList: async (listId: string, versionId: string, subscriberRemoveFromDraftListRequest?: SubscriberRemoveFromDraftListRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listId' is not null or undefined
            assertParamExists('removeFromDraftList', 'listId', listId)
            // verify required parameter 'versionId' is not null or undefined
            assertParamExists('removeFromDraftList', 'versionId', versionId)
            const localVarPath = `/v1/subscriber_list/{list_id}/version/{version_id}/subscriber/remove`
                .replace(`{${"list_id"}}`, encodeURIComponent(String(listId !== undefined ? listId : `-list_id-`)))
                .replace(`{${"version_id"}}`, encodeURIComponent(String(versionId !== undefined ? versionId : `-version_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: subscriberRemoveFromDraftListRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/subscriber_list/{list_id}/version/{version_id}/subscriber/remove',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(subscriberRemoveFromDraftListRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API to update user category preferences
         * @summary Update User Preferences (Category level)
         * @param {string} distinctId distinct_id of the user whose preferences should be fetched
         * @param {string} categorySlug notification category slug. You can get this from Notification Categories page on SuprSend dashboard -&gt; Settings page
         * @param {string} [tenantId] to fetch user preferences for a particular brand
         * @param {SubscriberUpdateUserPreferencesCategoryRequest} [subscriberUpdateUserPreferencesCategoryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPreferencesCategory: async (distinctId: string, categorySlug: string, tenantId?: string, subscriberUpdateUserPreferencesCategoryRequest?: SubscriberUpdateUserPreferencesCategoryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'distinctId' is not null or undefined
            assertParamExists('updateUserPreferencesCategory', 'distinctId', distinctId)
            // verify required parameter 'categorySlug' is not null or undefined
            assertParamExists('updateUserPreferencesCategory', 'categorySlug', categorySlug)
            const localVarPath = `/v1/subscriber/{distinct_id}/category/{category_slug}`
                .replace(`{${"distinct_id"}}`, encodeURIComponent(String(distinctId !== undefined ? distinctId : `-distinct_id-`)))
                .replace(`{${"category_slug"}}`, encodeURIComponent(String(categorySlug !== undefined ? categorySlug : `-category_slug-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })
            if (tenantId !== undefined) {
                localVarQueryParameter['tenant_id'] = tenantId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: subscriberUpdateUserPreferencesCategoryRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/subscriber/{distinct_id}/category/{category_slug}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(subscriberUpdateUserPreferencesCategoryRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubscriberApi - functional programming interface
 * @export
 */
export const SubscriberApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubscriberApiAxiosParamCreator(configuration)
    return {
        /**
         * Add subscribers to a draft list with a version_id that uniquely identifies the draft list
         * @summary Add Subscribers to Draft List
         * @param {SubscriberApiAddToDraftListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addToDraftList(requestParameters: SubscriberApiAddToDraftListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const subscriberAddToDraftListRequest: SubscriberAddToDraftListRequest = {
                distinct_ids: requestParameters.distinct_ids
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addToDraftList(requestParameters.listId, requestParameters.versionId, subscriberAddToDraftListRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API to add users / subscribers to the list
         * @summary Add Subscribers to List
         * @param {SubscriberApiAddToListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addToList(requestParameters: SubscriberApiAddToListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const subscriberAddToListRequest: SubscriberAddToListRequest = {
                distinct_ids: requestParameters.distinct_ids
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addToList(requestParameters.listId, subscriberAddToListRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API to delete a list created in your workspace
         * @summary Delete Draft List
         * @param {SubscriberApiDeleteDraftListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDraftList(requestParameters: SubscriberApiDeleteDraftListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDraftList(requestParameters.listId, requestParameters.versionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Finishes the sync for a draft version and makes that particular version live for the given list_id
         * @summary Finish Sync
         * @param {SubscriberApiFinishSyncDraftVersionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async finishSyncDraftVersion(requestParameters: SubscriberApiFinishSyncDraftVersionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.finishSyncDraftVersion(requestParameters.listId, requestParameters.versionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove subscribers from a draft list with a version_id that uniquely identifies the draft list
         * @summary Remove Subscribers from Draft List
         * @param {SubscriberApiRemoveFromDraftListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFromDraftList(requestParameters: SubscriberApiRemoveFromDraftListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const subscriberRemoveFromDraftListRequest: SubscriberRemoveFromDraftListRequest = {
                distinct_ids: requestParameters.distinct_ids
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeFromDraftList(requestParameters.listId, requestParameters.versionId, subscriberRemoveFromDraftListRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API to update user category preferences
         * @summary Update User Preferences (Category level)
         * @param {SubscriberApiUpdateUserPreferencesCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserPreferencesCategory(requestParameters: SubscriberApiUpdateUserPreferencesCategoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const subscriberUpdateUserPreferencesCategoryRequest: SubscriberUpdateUserPreferencesCategoryRequest = {
                preference: requestParameters.preference,
                opt_out_channels: requestParameters.opt_out_channels
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserPreferencesCategory(requestParameters.distinctId, requestParameters.categorySlug, requestParameters.tenantId, subscriberUpdateUserPreferencesCategoryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SubscriberApi - factory interface
 * @export
 */
export const SubscriberApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubscriberApiFp(configuration)
    return {
        /**
         * Add subscribers to a draft list with a version_id that uniquely identifies the draft list
         * @summary Add Subscribers to Draft List
         * @param {SubscriberApiAddToDraftListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToDraftList(requestParameters: SubscriberApiAddToDraftListRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.addToDraftList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * API to add users / subscribers to the list
         * @summary Add Subscribers to List
         * @param {SubscriberApiAddToListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addToList(requestParameters: SubscriberApiAddToListRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.addToList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * API to delete a list created in your workspace
         * @summary Delete Draft List
         * @param {SubscriberApiDeleteDraftListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDraftList(requestParameters: SubscriberApiDeleteDraftListRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.deleteDraftList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Finishes the sync for a draft version and makes that particular version live for the given list_id
         * @summary Finish Sync
         * @param {SubscriberApiFinishSyncDraftVersionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        finishSyncDraftVersion(requestParameters: SubscriberApiFinishSyncDraftVersionRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.finishSyncDraftVersion(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove subscribers from a draft list with a version_id that uniquely identifies the draft list
         * @summary Remove Subscribers from Draft List
         * @param {SubscriberApiRemoveFromDraftListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFromDraftList(requestParameters: SubscriberApiRemoveFromDraftListRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.removeFromDraftList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * API to update user category preferences
         * @summary Update User Preferences (Category level)
         * @param {SubscriberApiUpdateUserPreferencesCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserPreferencesCategory(requestParameters: SubscriberApiUpdateUserPreferencesCategoryRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.updateUserPreferencesCategory(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addToDraftList operation in SubscriberApi.
 * @export
 * @interface SubscriberApiAddToDraftListRequest
 */
export type SubscriberApiAddToDraftListRequest = {
    
    /**
    * Unique string idenitifier of the list to which user needs to be updated
    * @type {string}
    * @memberof SubscriberApiAddToDraftList
    */
    readonly listId: string
    
    /**
    * Unique string idenitifier of the draft version of the list to which user needs to be updated
    * @type {string}
    * @memberof SubscriberApiAddToDraftList
    */
    readonly versionId: string
    
} & SubscriberAddToDraftListRequest

/**
 * Request parameters for addToList operation in SubscriberApi.
 * @export
 * @interface SubscriberApiAddToListRequest
 */
export type SubscriberApiAddToListRequest = {
    
    /**
    * Unique string idenitifier of the list to which user needs to be updated
    * @type {string}
    * @memberof SubscriberApiAddToList
    */
    readonly listId: string
    
} & SubscriberAddToListRequest

/**
 * Request parameters for deleteDraftList operation in SubscriberApi.
 * @export
 * @interface SubscriberApiDeleteDraftListRequest
 */
export type SubscriberApiDeleteDraftListRequest = {
    
    /**
    * Unique string idenitifier of the list which you want to delete
    * @type {string}
    * @memberof SubscriberApiDeleteDraftList
    */
    readonly listId: string
    
    /**
    * Unique identifier of the draft version of the list which needs to be deleted
    * @type {string}
    * @memberof SubscriberApiDeleteDraftList
    */
    readonly versionId: string
    
}

/**
 * Request parameters for finishSyncDraftVersion operation in SubscriberApi.
 * @export
 * @interface SubscriberApiFinishSyncDraftVersionRequest
 */
export type SubscriberApiFinishSyncDraftVersionRequest = {
    
    /**
    * Unique string idenitifier of the list
    * @type {string}
    * @memberof SubscriberApiFinishSyncDraftVersion
    */
    readonly listId: string
    
    /**
    * Unique string idenitifier of the draft version of the list which needs to be made active(live)
    * @type {string}
    * @memberof SubscriberApiFinishSyncDraftVersion
    */
    readonly versionId: string
    
}

/**
 * Request parameters for removeFromDraftList operation in SubscriberApi.
 * @export
 * @interface SubscriberApiRemoveFromDraftListRequest
 */
export type SubscriberApiRemoveFromDraftListRequest = {
    
    /**
    * Unique string idenitifier of the list to which user needs to be updated
    * @type {string}
    * @memberof SubscriberApiRemoveFromDraftList
    */
    readonly listId: string
    
    /**
    * Unique string idenitifier of the draft version of the list to which user needs to be updated
    * @type {string}
    * @memberof SubscriberApiRemoveFromDraftList
    */
    readonly versionId: string
    
} & SubscriberRemoveFromDraftListRequest

/**
 * Request parameters for updateUserPreferencesCategory operation in SubscriberApi.
 * @export
 * @interface SubscriberApiUpdateUserPreferencesCategoryRequest
 */
export type SubscriberApiUpdateUserPreferencesCategoryRequest = {
    
    /**
    * distinct_id of the user whose preferences should be fetched
    * @type {string}
    * @memberof SubscriberApiUpdateUserPreferencesCategory
    */
    readonly distinctId: string
    
    /**
    * notification category slug. You can get this from Notification Categories page on SuprSend dashboard -> Settings page
    * @type {string}
    * @memberof SubscriberApiUpdateUserPreferencesCategory
    */
    readonly categorySlug: string
    
    /**
    * to fetch user preferences for a particular brand
    * @type {string}
    * @memberof SubscriberApiUpdateUserPreferencesCategory
    */
    readonly tenantId?: string
    
} & SubscriberUpdateUserPreferencesCategoryRequest

/**
 * SubscriberApiGenerated - object-oriented interface
 * @export
 * @class SubscriberApiGenerated
 * @extends {BaseAPI}
 */
export class SubscriberApiGenerated extends BaseAPI {
    /**
     * Add subscribers to a draft list with a version_id that uniquely identifies the draft list
     * @summary Add Subscribers to Draft List
     * @param {SubscriberApiAddToDraftListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberApiGenerated
     */
    public addToDraftList(requestParameters: SubscriberApiAddToDraftListRequest, options?: AxiosRequestConfig) {
        return SubscriberApiFp(this.configuration).addToDraftList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API to add users / subscribers to the list
     * @summary Add Subscribers to List
     * @param {SubscriberApiAddToListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberApiGenerated
     */
    public addToList(requestParameters: SubscriberApiAddToListRequest, options?: AxiosRequestConfig) {
        return SubscriberApiFp(this.configuration).addToList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API to delete a list created in your workspace
     * @summary Delete Draft List
     * @param {SubscriberApiDeleteDraftListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberApiGenerated
     */
    public deleteDraftList(requestParameters: SubscriberApiDeleteDraftListRequest, options?: AxiosRequestConfig) {
        return SubscriberApiFp(this.configuration).deleteDraftList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Finishes the sync for a draft version and makes that particular version live for the given list_id
     * @summary Finish Sync
     * @param {SubscriberApiFinishSyncDraftVersionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberApiGenerated
     */
    public finishSyncDraftVersion(requestParameters: SubscriberApiFinishSyncDraftVersionRequest, options?: AxiosRequestConfig) {
        return SubscriberApiFp(this.configuration).finishSyncDraftVersion(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove subscribers from a draft list with a version_id that uniquely identifies the draft list
     * @summary Remove Subscribers from Draft List
     * @param {SubscriberApiRemoveFromDraftListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberApiGenerated
     */
    public removeFromDraftList(requestParameters: SubscriberApiRemoveFromDraftListRequest, options?: AxiosRequestConfig) {
        return SubscriberApiFp(this.configuration).removeFromDraftList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API to update user category preferences
     * @summary Update User Preferences (Category level)
     * @param {SubscriberApiUpdateUserPreferencesCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriberApiGenerated
     */
    public updateUserPreferencesCategory(requestParameters: SubscriberApiUpdateUserPreferencesCategoryRequest, options?: AxiosRequestConfig) {
        return SubscriberApiFp(this.configuration).updateUserPreferencesCategory(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
