/* tslint:disable */
/* eslint-disable */
/*
SuprSend API

SuprSend is a central communication stack for easily creating, managing and delivering notifications to your end users on multiple channels. Our single notification API has all the features set, which enables you to send notifications in a reliable and scalable manner and take care of end user experience, thereby eliminating the need to develop any notification service in-house for transactional/engagement notifications.

The version of the OpenAPI document: 1.2.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { WorkflowConfigureTriggerRequest } from '../models';
// @ts-ignore
import { WorkflowConfigureTriggerRequestDelivery } from '../models';
// @ts-ignore
import { WorkflowConfigureTriggerRequestUsersInner } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * WorkflowApi - axios parameter creator
 * @export
 */
export const WorkflowApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * API to configure and trigger workflow dynamically
         * @summary Trigger Workflow
         * @param {string} workspaceKey 
         * @param {WorkflowConfigureTriggerRequest} [workflowConfigureTriggerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configureTrigger: async (workspaceKey: string, workflowConfigureTriggerRequest?: WorkflowConfigureTriggerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceKey' is not null or undefined
            assertParamExists('configureTrigger', 'workspaceKey', workspaceKey)
            const localVarPath = `/{workspace_key}/trigger`
                .replace(`{${"workspace_key"}}`, encodeURIComponent(String(workspaceKey !== undefined ? workspaceKey : `-workspace_key-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: workflowConfigureTriggerRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{workspace_key}/trigger',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(workflowConfigureTriggerRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkflowApi - functional programming interface
 * @export
 */
export const WorkflowApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WorkflowApiAxiosParamCreator(configuration)
    return {
        /**
         * API to configure and trigger workflow dynamically
         * @summary Trigger Workflow
         * @param {WorkflowApiConfigureTriggerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async configureTrigger(requestParameters: WorkflowApiConfigureTriggerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const workflowConfigureTriggerRequest: WorkflowConfigureTriggerRequest = {
                name: requestParameters.name,
                template: requestParameters.template,
                notification_category: requestParameters.notification_category,
                users: requestParameters.users,
                data: requestParameters.data,
                delivery: requestParameters.delivery,
                delay: requestParameters.delay,
                trigger_at: requestParameters.trigger_at,
                brand_id: requestParameters.brand_id,
                $idempotency_key: requestParameters.$idempotency_key
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.configureTrigger(requestParameters.workspaceKey, workflowConfigureTriggerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WorkflowApi - factory interface
 * @export
 */
export const WorkflowApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WorkflowApiFp(configuration)
    return {
        /**
         * API to configure and trigger workflow dynamically
         * @summary Trigger Workflow
         * @param {WorkflowApiConfigureTriggerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configureTrigger(requestParameters: WorkflowApiConfigureTriggerRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.configureTrigger(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for configureTrigger operation in WorkflowApi.
 * @export
 * @interface WorkflowApiConfigureTriggerRequest
 */
export type WorkflowApiConfigureTriggerRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof WorkflowApiConfigureTrigger
    */
    readonly workspaceKey: string
    
} & WorkflowConfigureTriggerRequest

/**
 * WorkflowApiGenerated - object-oriented interface
 * @export
 * @class WorkflowApiGenerated
 * @extends {BaseAPI}
 */
export class WorkflowApiGenerated extends BaseAPI {
    /**
     * API to configure and trigger workflow dynamically
     * @summary Trigger Workflow
     * @param {WorkflowApiConfigureTriggerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowApiGenerated
     */
    public configureTrigger(requestParameters: WorkflowApiConfigureTriggerRequest, options?: AxiosRequestConfig) {
        return WorkflowApiFp(this.configuration).configureTrigger(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
