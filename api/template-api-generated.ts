/* tslint:disable */
/* eslint-disable */
/*
SuprSend API

SuprSend is a central communication stack for easily creating, managing and delivering notifications to your end users on multiple channels. Our single notification API has all the features set, which enables you to send notifications in a reliable and scalable manner and take care of end user experience, thereby eliminating the need to develop any notification service in-house for transactional/engagement notifications.

The version of the OpenAPI document: 1.2.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { TemplateGetContentChannelResponse } from '../models';
// @ts-ignore
import { TemplateGetDetailsResponse } from '../models';
// @ts-ignore
import { TemplateGetListResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TemplateApi - axios parameter creator
 * @export
 */
export const TemplateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * APIs to fetch the content of a particular channel in a template group. It will return data for live and draft version of a template.
         * @summary Fetch Template content for a channel
         * @param {string} templateSlug Template group slug you want to fetch content details. You\&#39;ll get the template slug by clicking on copy button next to template group name on SuprSend dashboard -&gt; template details page.
         * @param {string} channelSlug add one of the template channels  - &#x60;email&#x60;, &#x60;sms&#x60;, &#x60;whatsapp&#x60;, &#x60;inbox&#x60;, &#x60;slack&#x60;, &#x60;androidpush&#x60;, &#x60;iospush&#x60;, &#x60;webpush&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentChannel: async (templateSlug: string, channelSlug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateSlug' is not null or undefined
            assertParamExists('getContentChannel', 'templateSlug', templateSlug)
            // verify required parameter 'channelSlug' is not null or undefined
            assertParamExists('getContentChannel', 'channelSlug', channelSlug)
            const localVarPath = `/v1/template/{template_slug}/channel/{channel_slug}`
                .replace(`{${"template_slug"}}`, encodeURIComponent(String(templateSlug !== undefined ? templateSlug : `-template_slug-`)))
                .replace(`{${"channel_slug"}}`, encodeURIComponent(String(channelSlug !== undefined ? channelSlug : `-channel_slug-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/template/{template_slug}/channel/{channel_slug}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * APIs to fetch the content of a template group. It will return data for live and draft version of a template.
         * @summary Fetch Template details
         * @param {string} templateSlug Template group slug you want to fetch content details. You\&#39;ll get the template slug by clicking on copy button next to template group name on SuprSend dashboard -&gt; template details page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails: async (templateSlug: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateSlug' is not null or undefined
            assertParamExists('getDetails', 'templateSlug', templateSlug)
            const localVarPath = `/v1/template/{template_slug}`
                .replace(`{${"template_slug"}}`, encodeURIComponent(String(templateSlug !== undefined ? templateSlug : `-template_slug-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/template/{template_slug}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * APIs to fetch the list of all templates in a workspace
         * @summary Fetch Template List
         * @param {string} [hasTagIdsAny] comma separated string of tag ids attached to the template
         * @param {string} [hasChannelsAny] comma separated string of channels. Returns templates which has any of the channels present from the channel string. Use these keys for channels - &#x60;email&#x60;, &#x60;sms&#x60;, &#x60;whatsapp&#x60;, &#x60;inbox&#x60;, &#x60;slack&#x60;, &#x60;androidpush&#x60;, &#x60;iospush&#x60;, &#x60;webpush&#x60;
         * @param {boolean} [isActive] Set &#x60;true&#x60; for published templates, &#x60;false&#x60; for templates which are in draft. Do not pass this key to return all templates.
         * @param {boolean} [isArchived] Set &#x60;true&#x60; to get archived templates, default &#x3D; &#x60;false&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList: async (hasTagIdsAny?: string, hasChannelsAny?: string, isActive?: boolean, isArchived?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/template`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })
            if (hasTagIdsAny !== undefined) {
                localVarQueryParameter['has_tag_ids_any'] = hasTagIdsAny;
            }

            if (hasChannelsAny !== undefined) {
                localVarQueryParameter['has_channels_any'] = hasChannelsAny;
            }

            if (isActive !== undefined) {
                localVarQueryParameter['is_active'] = isActive;
            }

            if (isArchived !== undefined) {
                localVarQueryParameter['is_archived'] = isArchived;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/template',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TemplateApi - functional programming interface
 * @export
 */
export const TemplateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TemplateApiAxiosParamCreator(configuration)
    return {
        /**
         * APIs to fetch the content of a particular channel in a template group. It will return data for live and draft version of a template.
         * @summary Fetch Template content for a channel
         * @param {TemplateApiGetContentChannelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContentChannel(requestParameters: TemplateApiGetContentChannelRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TemplateGetContentChannelResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContentChannel(requestParameters.templateSlug, requestParameters.channelSlug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * APIs to fetch the content of a template group. It will return data for live and draft version of a template.
         * @summary Fetch Template details
         * @param {TemplateApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetails(requestParameters: TemplateApiGetDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TemplateGetDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetails(requestParameters.templateSlug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * APIs to fetch the list of all templates in a workspace
         * @summary Fetch Template List
         * @param {TemplateApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getList(requestParameters: TemplateApiGetListRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TemplateGetListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getList(requestParameters.hasTagIdsAny, requestParameters.hasChannelsAny, requestParameters.isActive, requestParameters.isArchived, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TemplateApi - factory interface
 * @export
 */
export const TemplateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TemplateApiFp(configuration)
    return {
        /**
         * APIs to fetch the content of a particular channel in a template group. It will return data for live and draft version of a template.
         * @summary Fetch Template content for a channel
         * @param {TemplateApiGetContentChannelRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentChannel(requestParameters: TemplateApiGetContentChannelRequest, options?: AxiosRequestConfig): AxiosPromise<TemplateGetContentChannelResponse> {
            return localVarFp.getContentChannel(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * APIs to fetch the content of a template group. It will return data for live and draft version of a template.
         * @summary Fetch Template details
         * @param {TemplateApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails(requestParameters: TemplateApiGetDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<TemplateGetDetailsResponse> {
            return localVarFp.getDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * APIs to fetch the list of all templates in a workspace
         * @summary Fetch Template List
         * @param {TemplateApiGetListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getList(requestParameters: TemplateApiGetListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<TemplateGetListResponse> {
            return localVarFp.getList(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getContentChannel operation in TemplateApi.
 * @export
 * @interface TemplateApiGetContentChannelRequest
 */
export type TemplateApiGetContentChannelRequest = {
    
    /**
    * Template group slug you want to fetch content details. You\'ll get the template slug by clicking on copy button next to template group name on SuprSend dashboard -> template details page.
    * @type {string}
    * @memberof TemplateApiGetContentChannel
    */
    readonly templateSlug: string
    
    /**
    * add one of the template channels  - `email`, `sms`, `whatsapp`, `inbox`, `slack`, `androidpush`, `iospush`, `webpush`
    * @type {string}
    * @memberof TemplateApiGetContentChannel
    */
    readonly channelSlug: string
    
}

/**
 * Request parameters for getDetails operation in TemplateApi.
 * @export
 * @interface TemplateApiGetDetailsRequest
 */
export type TemplateApiGetDetailsRequest = {
    
    /**
    * Template group slug you want to fetch content details. You\'ll get the template slug by clicking on copy button next to template group name on SuprSend dashboard -> template details page.
    * @type {string}
    * @memberof TemplateApiGetDetails
    */
    readonly templateSlug: string
    
}

/**
 * Request parameters for getList operation in TemplateApi.
 * @export
 * @interface TemplateApiGetListRequest
 */
export type TemplateApiGetListRequest = {
    
    /**
    * comma separated string of tag ids attached to the template
    * @type {string}
    * @memberof TemplateApiGetList
    */
    readonly hasTagIdsAny?: string
    
    /**
    * comma separated string of channels. Returns templates which has any of the channels present from the channel string. Use these keys for channels - `email`, `sms`, `whatsapp`, `inbox`, `slack`, `androidpush`, `iospush`, `webpush`
    * @type {string}
    * @memberof TemplateApiGetList
    */
    readonly hasChannelsAny?: string
    
    /**
    * Set `true` for published templates, `false` for templates which are in draft. Do not pass this key to return all templates.
    * @type {boolean}
    * @memberof TemplateApiGetList
    */
    readonly isActive?: boolean
    
    /**
    * Set `true` to get archived templates, default = `false`
    * @type {boolean}
    * @memberof TemplateApiGetList
    */
    readonly isArchived?: boolean
    
}

/**
 * TemplateApiGenerated - object-oriented interface
 * @export
 * @class TemplateApiGenerated
 * @extends {BaseAPI}
 */
export class TemplateApiGenerated extends BaseAPI {
    /**
     * APIs to fetch the content of a particular channel in a template group. It will return data for live and draft version of a template.
     * @summary Fetch Template content for a channel
     * @param {TemplateApiGetContentChannelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApiGenerated
     */
    public getContentChannel(requestParameters: TemplateApiGetContentChannelRequest, options?: AxiosRequestConfig) {
        return TemplateApiFp(this.configuration).getContentChannel(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * APIs to fetch the content of a template group. It will return data for live and draft version of a template.
     * @summary Fetch Template details
     * @param {TemplateApiGetDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApiGenerated
     */
    public getDetails(requestParameters: TemplateApiGetDetailsRequest, options?: AxiosRequestConfig) {
        return TemplateApiFp(this.configuration).getDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * APIs to fetch the list of all templates in a workspace
     * @summary Fetch Template List
     * @param {TemplateApiGetListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TemplateApiGenerated
     */
    public getList(requestParameters: TemplateApiGetListRequest = {}, options?: AxiosRequestConfig) {
        return TemplateApiFp(this.configuration).getList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
