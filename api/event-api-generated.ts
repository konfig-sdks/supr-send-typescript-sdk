/* tslint:disable */
/* eslint-disable */
/*
SuprSend API

SuprSend is a central communication stack for easily creating, managing and delivering notifications to your end users on multiple channels. Our single notification API has all the features set, which enables you to send notifications in a reliable and scalable manner and take care of end user experience, thereby eliminating the need to develop any notification service in-house for transactional/engagement notifications.

The version of the OpenAPI document: 1.2.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { EventTriggerEventRequest } from '../models';
// @ts-ignore
import { EventTriggerEventRequestUserOperationsInner } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * EventApi - axios parameter creator
 * @export
 */
export const EventApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * API used to pass event which can then be used to trigger workflows created on SuprSend dashboard
         * @summary Trigger an Event
         * @param {EventTriggerEventRequest} [eventTriggerEventRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerEvent: async (eventTriggerEventRequest?: EventTriggerEventRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/event`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: eventTriggerEventRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/event',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(eventTriggerEventRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventApi - functional programming interface
 * @export
 */
export const EventApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventApiAxiosParamCreator(configuration)
    return {
        /**
         * API used to pass event which can then be used to trigger workflows created on SuprSend dashboard
         * @summary Trigger an Event
         * @param {EventApiTriggerEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async triggerEvent(requestParameters: EventApiTriggerEventRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const eventTriggerEventRequest: EventTriggerEventRequest = {
                distinct_id: requestParameters.distinct_id,
                $user_operations: requestParameters.$user_operations,
                event: requestParameters.event,
                properties: requestParameters.properties,
                brand_id: requestParameters.brand_id,
                $idempotency_key: requestParameters.$idempotency_key
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.triggerEvent(eventTriggerEventRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EventApi - factory interface
 * @export
 */
export const EventApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventApiFp(configuration)
    return {
        /**
         * API used to pass event which can then be used to trigger workflows created on SuprSend dashboard
         * @summary Trigger an Event
         * @param {EventApiTriggerEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerEvent(requestParameters: EventApiTriggerEventRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.triggerEvent(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for triggerEvent operation in EventApi.
 * @export
 * @interface EventApiTriggerEventRequest
 */
export type EventApiTriggerEventRequest = {
    
} & EventTriggerEventRequest

/**
 * EventApiGenerated - object-oriented interface
 * @export
 * @class EventApiGenerated
 * @extends {BaseAPI}
 */
export class EventApiGenerated extends BaseAPI {
    /**
     * API used to pass event which can then be used to trigger workflows created on SuprSend dashboard
     * @summary Trigger an Event
     * @param {EventApiTriggerEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventApiGenerated
     */
    public triggerEvent(requestParameters: EventApiTriggerEventRequest, options?: AxiosRequestConfig) {
        return EventApiFp(this.configuration).triggerEvent(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
