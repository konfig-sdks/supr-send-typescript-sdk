/* tslint:disable */
/* eslint-disable */
/*
SuprSend API

SuprSend is a central communication stack for easily creating, managing and delivering notifications to your end users on multiple channels. Our single notification API has all the features set, which enables you to send notifications in a reliable and scalable manner and take care of end user experience, thereby eliminating the need to develop any notification service in-house for transactional/engagement notifications.

The version of the OpenAPI document: 1.2.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BroadcastTriggerMessageListRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * BroadcastApi - axios parameter creator
 * @export
 */
export const BroadcastApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * API to trigger broadcast messages on a list of users
         * @summary Trigger Broadcast
         * @param {string} workspaceKey 
         * @param {BroadcastTriggerMessageListRequest} [broadcastTriggerMessageListRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerMessageList: async (workspaceKey: string, broadcastTriggerMessageListRequest?: BroadcastTriggerMessageListRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'workspaceKey' is not null or undefined
            assertParamExists('triggerMessageList', 'workspaceKey', workspaceKey)
            const localVarPath = `/{workspace_key}/broadcast`
                .replace(`{${"workspace_key"}}`, encodeURIComponent(String(workspaceKey !== undefined ? workspaceKey : `-workspace_key-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: broadcastTriggerMessageListRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{workspace_key}/broadcast',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(broadcastTriggerMessageListRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BroadcastApi - functional programming interface
 * @export
 */
export const BroadcastApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BroadcastApiAxiosParamCreator(configuration)
    return {
        /**
         * API to trigger broadcast messages on a list of users
         * @summary Trigger Broadcast
         * @param {BroadcastApiTriggerMessageListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async triggerMessageList(requestParameters: BroadcastApiTriggerMessageListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const broadcastTriggerMessageListRequest: BroadcastTriggerMessageListRequest = {
                list_id: requestParameters.list_id,
                template: requestParameters.template,
                notification_category: requestParameters.notification_category,
                channels: requestParameters.channels,
                data: requestParameters.data,
                delay: requestParameters.delay,
                trigger_at: requestParameters.trigger_at,
                brand_id: requestParameters.brand_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.triggerMessageList(requestParameters.workspaceKey, broadcastTriggerMessageListRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BroadcastApi - factory interface
 * @export
 */
export const BroadcastApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BroadcastApiFp(configuration)
    return {
        /**
         * API to trigger broadcast messages on a list of users
         * @summary Trigger Broadcast
         * @param {BroadcastApiTriggerMessageListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        triggerMessageList(requestParameters: BroadcastApiTriggerMessageListRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.triggerMessageList(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for triggerMessageList operation in BroadcastApi.
 * @export
 * @interface BroadcastApiTriggerMessageListRequest
 */
export type BroadcastApiTriggerMessageListRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof BroadcastApiTriggerMessageList
    */
    readonly workspaceKey: string
    
} & BroadcastTriggerMessageListRequest

/**
 * BroadcastApiGenerated - object-oriented interface
 * @export
 * @class BroadcastApiGenerated
 * @extends {BaseAPI}
 */
export class BroadcastApiGenerated extends BaseAPI {
    /**
     * API to trigger broadcast messages on a list of users
     * @summary Trigger Broadcast
     * @param {BroadcastApiTriggerMessageListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BroadcastApiGenerated
     */
    public triggerMessageList(requestParameters: BroadcastApiTriggerMessageListRequest, options?: AxiosRequestConfig) {
        return BroadcastApiFp(this.configuration).triggerMessageList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
