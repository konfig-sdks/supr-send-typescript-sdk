/* tslint:disable */
/* eslint-disable */
/*
SuprSend API

SuprSend is a central communication stack for easily creating, managing and delivering notifications to your end users on multiple channels. Our single notification API has all the features set, which enables you to send notifications in a reliable and scalable manner and take care of end user experience, thereby eliminating the need to develop any notification service in-house for transactional/engagement notifications.

The version of the OpenAPI document: 1.2.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PreferenceUpdateChannelPreferencesRequest } from '../models';
// @ts-ignore
import { PreferenceUpdateChannelPreferencesRequestChannelPreferencesInner } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PreferenceApi - axios parameter creator
 * @export
 */
export const PreferenceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * API to get user channel preferences
         * @summary Get User Preferences (Channel level)
         * @param {string} distinctId distinct_id of the user whose preferences should be fetched
         * @param {string} [tenantId] to fetch user preferences for a particular brand
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserChannelPreferences: async (distinctId: string, tenantId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'distinctId' is not null or undefined
            assertParamExists('getUserChannelPreferences', 'distinctId', distinctId)
            const localVarPath = `/v1/subscriber/{distinct_id}/channel_preference`
                .replace(`{${"distinct_id"}}`, encodeURIComponent(String(distinctId !== undefined ? distinctId : `-distinct_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })
            if (tenantId !== undefined) {
                localVarQueryParameter['tenant_id'] = tenantId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/subscriber/{distinct_id}/channel_preference',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API to update user channel preferences
         * @summary Update User Preferences (Channel level)
         * @param {string} distinctId distinct_id of the user whose preferences should be fetched
         * @param {string} [tenantId] to fetch user preferences for a particular brand
         * @param {PreferenceUpdateChannelPreferencesRequest} [preferenceUpdateChannelPreferencesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateChannelPreferences: async (distinctId: string, tenantId?: string, preferenceUpdateChannelPreferencesRequest?: PreferenceUpdateChannelPreferencesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'distinctId' is not null or undefined
            assertParamExists('updateChannelPreferences', 'distinctId', distinctId)
            const localVarPath = `/v1/subscriber/{distinct_id}/channel_preference`
                .replace(`{${"distinct_id"}}`, encodeURIComponent(String(distinctId !== undefined ? distinctId : `-distinct_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })
            if (tenantId !== undefined) {
                localVarQueryParameter['tenant_id'] = tenantId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: preferenceUpdateChannelPreferencesRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/subscriber/{distinct_id}/channel_preference',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(preferenceUpdateChannelPreferencesRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PreferenceApi - functional programming interface
 * @export
 */
export const PreferenceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PreferenceApiAxiosParamCreator(configuration)
    return {
        /**
         * API to get user channel preferences
         * @summary Get User Preferences (Channel level)
         * @param {PreferenceApiGetUserChannelPreferencesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserChannelPreferences(requestParameters: PreferenceApiGetUserChannelPreferencesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserChannelPreferences(requestParameters.distinctId, requestParameters.tenantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * API to update user channel preferences
         * @summary Update User Preferences (Channel level)
         * @param {PreferenceApiUpdateChannelPreferencesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateChannelPreferences(requestParameters: PreferenceApiUpdateChannelPreferencesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const preferenceUpdateChannelPreferencesRequest: PreferenceUpdateChannelPreferencesRequest = {
                channel_preferences: requestParameters.channel_preferences
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateChannelPreferences(requestParameters.distinctId, requestParameters.tenantId, preferenceUpdateChannelPreferencesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PreferenceApi - factory interface
 * @export
 */
export const PreferenceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PreferenceApiFp(configuration)
    return {
        /**
         * API to get user channel preferences
         * @summary Get User Preferences (Channel level)
         * @param {PreferenceApiGetUserChannelPreferencesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserChannelPreferences(requestParameters: PreferenceApiGetUserChannelPreferencesRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getUserChannelPreferences(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * API to update user channel preferences
         * @summary Update User Preferences (Channel level)
         * @param {PreferenceApiUpdateChannelPreferencesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateChannelPreferences(requestParameters: PreferenceApiUpdateChannelPreferencesRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.updateChannelPreferences(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getUserChannelPreferences operation in PreferenceApi.
 * @export
 * @interface PreferenceApiGetUserChannelPreferencesRequest
 */
export type PreferenceApiGetUserChannelPreferencesRequest = {
    
    /**
    * distinct_id of the user whose preferences should be fetched
    * @type {string}
    * @memberof PreferenceApiGetUserChannelPreferences
    */
    readonly distinctId: string
    
    /**
    * to fetch user preferences for a particular brand
    * @type {string}
    * @memberof PreferenceApiGetUserChannelPreferences
    */
    readonly tenantId?: string
    
}

/**
 * Request parameters for updateChannelPreferences operation in PreferenceApi.
 * @export
 * @interface PreferenceApiUpdateChannelPreferencesRequest
 */
export type PreferenceApiUpdateChannelPreferencesRequest = {
    
    /**
    * distinct_id of the user whose preferences should be fetched
    * @type {string}
    * @memberof PreferenceApiUpdateChannelPreferences
    */
    readonly distinctId: string
    
    /**
    * to fetch user preferences for a particular brand
    * @type {string}
    * @memberof PreferenceApiUpdateChannelPreferences
    */
    readonly tenantId?: string
    
} & PreferenceUpdateChannelPreferencesRequest

/**
 * PreferenceApiGenerated - object-oriented interface
 * @export
 * @class PreferenceApiGenerated
 * @extends {BaseAPI}
 */
export class PreferenceApiGenerated extends BaseAPI {
    /**
     * API to get user channel preferences
     * @summary Get User Preferences (Channel level)
     * @param {PreferenceApiGetUserChannelPreferencesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreferenceApiGenerated
     */
    public getUserChannelPreferences(requestParameters: PreferenceApiGetUserChannelPreferencesRequest, options?: AxiosRequestConfig) {
        return PreferenceApiFp(this.configuration).getUserChannelPreferences(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API to update user channel preferences
     * @summary Update User Preferences (Channel level)
     * @param {PreferenceApiUpdateChannelPreferencesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreferenceApiGenerated
     */
    public updateChannelPreferences(requestParameters: PreferenceApiUpdateChannelPreferencesRequest, options?: AxiosRequestConfig) {
        return PreferenceApiFp(this.configuration).updateChannelPreferences(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
