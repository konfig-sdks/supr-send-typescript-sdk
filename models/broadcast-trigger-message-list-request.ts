/*
SuprSend API

SuprSend is a central communication stack for easily creating, managing and delivering notifications to your end users on multiple channels. Our single notification API has all the features set, which enables you to send notifications in a reliable and scalable manner and take care of end user experience, thereby eliminating the need to develop any notification service in-house for transactional/engagement notifications.

The version of the OpenAPI document: 1.2.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/
import type * as buffer from "buffer"


/**
 * 
 * @export
 * @interface BroadcastTriggerMessageListRequest
 */
export interface BroadcastTriggerMessageListRequest {
    /**
     * unique identifier to user list that you want to send broadcast messages to.
     * @type {string}
     * @memberof BroadcastTriggerMessageListRequest
     */
    'list_id': string;
    /**
     * Unique slug name of the template created on SuprSend dashboard. You can get this by clicking on the clipboard icon next to the Template name on SuprSend templates page.
     * @type {string}
     * @memberof BroadcastTriggerMessageListRequest
     */
    'template': string;
    /**
     * Category in which your notification belongs. You can understand more about them in the [Notification Category](https://docs.suprsend.com/docs/notification-category) documentation
     * @type {string}
     * @memberof BroadcastTriggerMessageListRequest
     */
    'notification_category': string;
    /**
     * If set, broadcast will be sent only on the channels defined here irrespective of communication channels present in user profile.
     * @type {Array<string>}
     * @memberof BroadcastTriggerMessageListRequest
     */
    'channels'?: Array<string>;
    /**
     * Mock data to replace the template variables.
     * @type {string}
     * @memberof BroadcastTriggerMessageListRequest
     */
    'data'?: string;
    /**
     * Broadcast will be halted for the time mentioned in delay, and become active once the delay period is over. Format - `XXdXXhXXmXXs` or if its number (n) then delay is in seconds (n)
     * @type {string}
     * @memberof BroadcastTriggerMessageListRequest
     */
    'delay'?: string;
    /**
     * Trigger broadcast on a specific date-time. Format - date string in ISO 8601 eg. \"2022-08-27T20:14:51.643Z\"
     * @type {string}
     * @memberof BroadcastTriggerMessageListRequest
     */
    'trigger_at'?: string;
    /**
     * string identifier of the brand this broadcast is associated with
     * @type {string}
     * @memberof BroadcastTriggerMessageListRequest
     */
    'brand_id'?: string;
}

