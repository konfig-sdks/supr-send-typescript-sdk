/*
SuprSend API

SuprSend is a central communication stack for easily creating, managing and delivering notifications to your end users on multiple channels. Our single notification API has all the features set, which enables you to send notifications in a reliable and scalable manner and take care of end user experience, thereby eliminating the need to develop any notification service in-house for transactional/engagement notifications.

The version of the OpenAPI document: 1.2.1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/
import type * as buffer from "buffer"

import { BrandCreateOrUpdateRequestSocialLinks } from './brand-create-or-update-request-social-links';

/**
 * 
 * @export
 * @interface BrandCreateOrUpdateRequest
 */
export interface BrandCreateOrUpdateRequest {
    /**
     * Name of the brand. You can add company / organization name here
     * @type {string}
     * @memberof BrandCreateOrUpdateRequest
     */
    'brand_name': string;
    /**
     * URL of the brand logo
     * @type {string}
     * @memberof BrandCreateOrUpdateRequest
     */
    'logo'?: string;
    /**
     * Primary color of the brand - used for designing brand template. If you don\'t provide any of the colors for the brand, SuprSend will assume you want to use the default values, so color settings will automatically be set to the color settings of default brand.
     * @type {string}
     * @memberof BrandCreateOrUpdateRequest
     */
    'primary_color'?: string;
    /**
     * Secondary color of the brand - not used for designing the default templates. You can however add this property and use it in your templates
     * @type {string}
     * @memberof BrandCreateOrUpdateRequest
     */
    'secondary_color'?: string;
    /**
     * Tertiary color of the brand - not used for designing the default templates. You can however add this property and use it in your templates
     * @type {string}
     * @memberof BrandCreateOrUpdateRequest
     */
    'tertiary_color'?: string;
    /**
     * Link of the hosted preference page inside the brand product
     * @type {string}
     * @memberof BrandCreateOrUpdateRequest
     */
    'preference_page_url'?: string;
    /**
     * 
     * @type {BrandCreateOrUpdateRequestSocialLinks}
     * @memberof BrandCreateOrUpdateRequest
     */
    'social_links'?: BrandCreateOrUpdateRequestSocialLinks;
    /**
     * Custom properties associated with the brand. Example value - `{\"k1\": \"v1\", \"k2\": 1.0}` <br> Update operation on properties works like upsert on 1st-level keys (i.e. if top-level key doesn\'t already exist, then it will be added, otherwise its value will be replaced by the new value. All other key-value pairs will remain unchanged).
     * @type {string}
     * @memberof BrandCreateOrUpdateRequest
     */
    'properties'?: string;
}

